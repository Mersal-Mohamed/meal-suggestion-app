{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","meals","isClicked","getMeal","bind","this","setState","fetch","method","headers","Accept","then","res","json","catch","error","console","log","ingredients","i","push","key","youTubelink","strYoutube","slice","className","onClick","src","strMealThumb","alt","strCategory","strArea","strTags","strMeal","strInstructions","title","width","height","frameBorder","allow","allowFullScreen","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4PAmGeA,E,YAhGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,WAAW,GAEb,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBANE,E,uEAUR,IAAD,OACRC,KAAKC,SAAS,CAACJ,WAAW,IAQ1BK,MAPY,qDACI,CACdC,OAAQ,OACRC,QAAS,CACPC,OAAQ,sBAITC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI,EAAKN,SAAS,CAAEL,MAAOW,EAAIX,MAAM,QAC7Ca,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAO,uB,+BAOvB,IAHQ,IAAD,EACsBV,KAAKL,MAA1BC,EADD,EACCA,MAAOC,EADR,EACQA,UACTgB,EAAc,GACXC,EAAI,EAAGA,EAAI,IACdlB,EAAM,gBAAD,OAAiBkB,IADJA,IAEpBD,EAAYE,KAAK,wBAAIC,IAAKF,GAAIlB,EAAM,gBAAD,OAAiBkB,MAMxD,IACIG,EAAc,kCADDrB,EAAMsB,YAAc,IAC2BC,OAAO,IAEvE,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,YACb,+CACA,uEACA,4BAAQC,QAASrB,KAAKF,SAAtB,oBAGAD,EAEI,yBAAKuB,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKE,IAAK1B,EAAM2B,aAAcC,IAAI,SAClC,8BACE,wCADF,KACqB5B,EAAM6B,aAE3B,6BACA,8BACE,mCADF,KACgB7B,EAAM8B,SAEtB,6BACA,0BAAMN,UAAU,QACd,mCADF,KACgBxB,EAAM+B,SAEtB,6BACA,4CACA,4BAAKd,IAEP,yBAAKO,UAAU,YACb,4BAAKxB,EAAMgC,SACX,2BAAIhC,EAAMiC,mBAGd,yBAAKT,UAAU,aACb,yBAAKA,UAAU,aACb,6CACA,4BACEU,MAAM,QACNC,MAAM,OACNC,OAAO,MACPV,IAAKL,EACLgB,YAAY,IACZC,MAAM,0EACNC,iBAAe,OAK1B,U,GA3FOC,a,MCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,iB","file":"static/js/main.eacb0738.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meals: [],\n      isClicked: false\n    };\n    this.getMeal = this.getMeal.bind(this);\n  }\n\n\n  getMeal() {\n    this.setState({isClicked: true})\n    const url = \"https://www.themealdb.com/api/json/v1/1/random.php\";\n    const options = {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\"\n      }\n    };\n    fetch(url, options)\n      .then(res => res.json())\n      .then(res => this.setState({ meals: res.meals[0]}))\n      .catch(error => {\n        console.log(error, \"catch the hoop\");\n      }); \n  }\n\n  render() {\n    const { meals, isClicked } = this.state;\n    const ingredients = [];\n    for (let i = 1; i < 20; i++) {\n      if (meals[`strIngredient${i}`]) {\n        ingredients.push(<li key={i}>{meals[`strIngredient${i}`]}</li>);\n      } else {\n        break;\n      }\n    }\n\n    let youTubeUrl = meals.strYoutube || \"\";\n    let youTubelink = 'https://www.youtube.com/embed/' + youTubeUrl.slice(-11);\n\n    return (\n      <div className=\"meals\">\n        <div className=\"mainPage\">\n          <h2>Feeling hungry?</h2>\n          <p>Get a random meal by Clicking the button</p>\n          <button onClick={this.getMeal}> Get your meal </button>\n        </div>\n        {\n          isClicked?  \n            // eslint-disable-next-line no-unused-expressions\n              <div className=\"meal\">\n                <div className=\"container\">\n                  <div className=\"mealImg\">\n                    <img src={meals.strMealThumb} alt=\"food\" />\n                    <span>\n                      <b>Categeory</b>: {meals.strCategory}\n                    </span>\n                    <br />\n                    <span>\n                      <b>Area</b>: {meals.strArea}\n                    </span>\n                    <br />\n                    <span className=\"tags\">\n                      <b>Tags</b>: {meals.strTags}\n                    </span>\n                    <br />\n                    <h3>Ingredients:</h3>\n                    <ul>{ingredients}</ul>\n                  </div>\n                  <div className=\"mealName\">\n                    <h2>{meals.strMeal}</h2>\n                    <p>{meals.strInstructions}</p>\n                  </div>\n                </div>\n                <div className=\"mealVideo\">\n                  <div className=\"container\">\n                    <h3>Video Recipe:</h3>\n                    <iframe\n                      title=\"video\"\n                      width=\"100%\"\n                      height=\"315\"\n                      src={youTubelink}\n                      frameBorder=\"0\"\n                      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                      allowFullScreen\n                    ></iframe>\n                  </div>\n                </div>\n              </div>   \n          :null\n        }\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}